<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven You]]></title>
  <link href="http://GoSteven.com/atom.xml" rel="self"/>
  <link href="http://GoSteven.com/"/>
  <updated>2012-07-28T22:44:22+10:00</updated>
  <id>http://GoSteven.com/</id>
  <author>
    <name><![CDATA[Steven You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vertically scale web application via using non-blocking I/O]]></title>
    <link href="http://GoSteven.com/blog/2012/07/28/vertically-scale-web-application-via-using-non-blocking-i-slash-o/"/>
    <updated>2012-07-28T21:51:00+10:00</updated>
    <id>http://GoSteven.com/blog/2012/07/28/vertically-scale-web-application-via-using-non-blocking-i-slash-o</id>
    <content type="html"><![CDATA[<p>I have been working on web application scaling for a while. There are lots of interesting stuff. I will scale vertically first.</p>

<h2>Non-blocking I/O</h2>

<p>Blocking I/O means that the program execution is put on hold while the I/O is going on, which means the program waits until the I/O is finished and then continues it&#8217;s execution.</p>

<p>However, in non-blocking I/O, the program can continue during I/O operations, and is notified via a callback when IO operation is finished. This forces programmers to design programs differently making them perform a lot better.</p>

<p>The Non-blocking I/O was supported by most Operation Systems. On Windows there is underlying OS support for non-blocking I/O, and Microsoft&#8217;s CLR(Common Language Runtime, virtual machine component of .NET framework) takes advantage of that.</p>

<h2>Non-blocking I/O for web applications</h2>

<p>The implementation of non-blocking IO contribute the success of projects like <a href="http://nodejs.org/">node.js</a>.</p>

<p>For common web applications like JAVA Servlet, Apache web server , there is a design flaw, which introduce lots of overheads consume lots of mem and cpu because the thread is expensive. Non-blocking I/O is smart as the pending I/O connections will not consume any resources. On the other hand, underlying OS will be exhausted when looping through threads and checking status if each request will be handled via threads.</p>

<p>Here is a good slide describe node.js:</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/2693037" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/marcusf/nonblocking-io-event-loops-and-nodejs" title="Non-blocking I/O, Event loops and node.js" target="_blank">Non-blocking I/O, Event loops and node.js</a> </strong> from <strong><a href="http://www.slideshare.net/marcusf" target="_blank">Marcus Frödin</a></strong> </div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Latency numbers every programmer should know]]></title>
    <link href="http://GoSteven.com/blog/2012/06/08/latency-numbers-every-programmer-should-know/"/>
    <updated>2012-06-08T13:44:00+10:00</updated>
    <id>http://GoSteven.com/blog/2012/06/08/latency-numbers-every-programmer-should-know</id>
    <content type="html"><![CDATA[<p>This is an old topic from <a href="http://research.google.com/people/jeff/">Jeff Dean</a></p>

<div><script src='https://gist.github.com/2843375.js?file='></script>
<noscript><pre><code>### Latency numbers every programmer should know
    L1 cache reference ......................... 0.5 ns
    Branch mispredict ............................ 5 ns
    L2 cache reference ........................... 7 ns
    Mutex lock/unlock ........................... 25 ns
    Main memory reference ...................... 100 ns             
    Compress 1K bytes with Zippy ............. 3,000 ns  =   3 µs
    Send 2K bytes over 1 Gbps network ....... 20,000 ns  =  20 µs
    SSD random read ........................ 150,000 ns  = 150 µs
    Read 1 MB sequentially from memory ..... 250,000 ns  = 250 µs
    Round trip within same datacenter ...... 500,000 ns  = 0.5 ms
    Read 1 MB sequentially from SSD* ..... 1,000,000 ns  =   1 ms
    Disk seek ........................... 10,000,000 ns  =  10 ms
    Read 1 MB sequentially from disk .... 20,000,000 ns  =  20 ms
    Send packet CA-&gt;Netherlands-&gt;CA .... 150,000,000 ns  = 150 ms

Assuming ~1GB/sec SSD

![Visual representation of latencies](http://i.imgur.com/k0t1e.png)

Visual chart provided by [ayshen](https://gist.github.com/ayshen)

Data by [Jeff Dean](http://research.google.com/people/jeff/)

Originally by [Peter Norvig](http://norvig.com/21-days.html#answers)</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Download YouTube videos using python]]></title>
    <link href="http://GoSteven.com/blog/2012/06/07/download-youtube-videos-using-python/"/>
    <updated>2012-06-07T13:17:00+10:00</updated>
    <id>http://GoSteven.com/blog/2012/06/07/download-youtube-videos-using-python</id>
    <content type="html"><![CDATA[<p>I have searched around to find a simple way to download youtube video. However, google hasn’t provide an API for downloading, and youtube page content structure seems has changed a lot, some old post regarding how to download youtube video in <a href="http://abhinay.wordpress.com/2010/05/12/downloading-youtube-videos-using-python-one-liner/">one line python script</a> doesn’t work any more.</p>

<p>Finally I find an actively repository on github and forked it: <a href="https://github.com/GoSteven/python-youtube-download">python-youtube-download</a>.  To make it simpler to use rather than selecting the definition and specifying the format, I added main script to enable it to run in one line:</p>

<pre><code>python youtube.py "http://www.youtube.com/watch?v=6bXOOz8mN6U"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent tasks execution in Python]]></title>
    <link href="http://GoSteven.com/blog/2012/05/13/concurrent-tasks-execution-in-python/"/>
    <updated>2012-05-13T13:37:00+10:00</updated>
    <id>http://GoSteven.com/blog/2012/05/13/concurrent-tasks-execution-in-python</id>
    <content type="html"><![CDATA[<p>There are tasks need to be done with multiple thread, e.g.: I need to request thousands of urls, in order to training the collaborative filtering service. This could easily be done using python.</p>

<h3>First way: Manage the thread yourself</h3>

<p>I have a repo on Github, <a href="https://github.com/GoSteven/tumblrimgdownloader/blob/master/imgdl.py">Tumblr Image Downloader</a>, which is used for batch download images from a tumblr blog using tumblr API.</p>

<p>Basically, there is a <em>task queue</em>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>and a <em>worker</em>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">worker</span><span class="p">():</span>
</span><span class='line'>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>            <span class="n">download_img</span><span class="p">(</span><span class="n">q</span><span class="o">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">save_path</span><span class="p">)</span>
</span><span class='line'>            <span class="n">q</span><span class="o">.</span><span class="n">task_done</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>What the <em>download_img</em> function does is get the image url and save it to the <em>save_path</em>.</p>

<p>The program will call the <em>download_imgs</em> function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="k">def</span> <span class="nf">download_imgs</span><span class="p">(</span><span class="n">imgs_src</span><span class="p">,</span> <span class="n">save_path</span><span class="p">,</span> <span class="n">num_workers</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_workers</span><span class="p">):</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">)</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="n">setDaemon</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">img_src</span> <span class="ow">in</span> <span class="n">imgs_src</span><span class="p">:</span>
</span><span class='line'>            <span class="n">q</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">img_src</span><span class="p">,</span> <span class="n">save_path</span><span class="p">)</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">download_imgs</span><span class="p">(</span><span class="n">imgs_src</span><span class="p">,</span> <span class="n">save_path</span><span class="p">,</span> <span class="n">numthreads</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Better and Simpler way: Using concurrent.futures module</h3>

<p><a href="http://www.python.org/dev/peps/pep-3148/">PEP 3148</a> gives the motivation for this module:</p>

<blockquote><p>Python currently has powerful primitives to construct multi-threaded and multi-process applications but parallelizing simple operations requires a lot of work i.e. explicitly launching processes/threads, constructing a work/results queue, and waiting for completion or some other termination condition (e.g. failure, timeout). It is also difficult to design an application with a global process/thread limit when each component invents its own parallel execution strategy.</p></blockquote>

<p>This module will make the life easier. Download link is <a href="http://pypi.python.org/pypi/futures">here</a>. There are two types of executor: ThreadPoolExecutor and ProcessPoolExecutor.</p>

<p>I will take ThreadPoolExecutor for example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">concurrent.futures</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">urllib.request</span>
</span><span class='line'>
</span><span class='line'><span class="n">URLS</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;http://www.foxnews.com/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;http://www.cnn.com/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;http://europe.wsj.com/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;http://www.bbc.co.uk/&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">&#39;http://some-made-up-domain.com/&#39;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_url</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">timeout</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="n">concurrent</span><span class="o">.</span><span class="n">futures</span><span class="o">.</span><span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span> <span class="k">as</span> <span class="n">executor</span><span class="p">:</span>
</span><span class='line'>    <span class="n">future_to_url</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">((</span><span class="n">executor</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">load_url</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>                         <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">URLS</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">concurrent</span><span class="o">.</span><span class="n">futures</span><span class="o">.</span><span class="n">as_completed</span><span class="p">(</span><span class="n">future_to_url</span><span class="p">):</span>
</span><span class='line'>        <span class="n">url</span> <span class="o">=</span> <span class="n">future_to_url</span><span class="p">[</span><span class="n">future</span><span class="p">]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">future</span><span class="o">.</span><span class="n">exception</span><span class="p">()</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%r</span><span class="s"> generated an exception: </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">url</span><span class="p">,</span>
</span><span class='line'>                                                     <span class="n">future</span><span class="o">.</span><span class="n">exception</span><span class="p">()))</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%r</span><span class="s"> page is </span><span class="si">%d</span><span class="s"> bytes&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">())))</span>
</span></code></pre></td></tr></table></div></figure>


<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching to ZSH]]></title>
    <link href="http://GoSteven.com/blog/2012/05/10/switching-to-zsh/"/>
    <updated>2012-05-10T21:31:00+10:00</updated>
    <id>http://GoSteven.com/blog/2012/05/10/switching-to-zsh</id>
    <content type="html"><![CDATA[<p>Following <a href="http://en.wikipedia.org/wiki/Benjamin_Mako_Hill">Mako</a>, after reading some posts regarding the benefit of using ZSH, finally I execute the command jumping to the zsh world:</p>

<pre><code>curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</code></pre>

<h4>The good thing</h4>

<p>It works pretty awesome. It &#8220;acts extremely similar to bash&#8221;, but not always, which I will explain in the painful part. It does the typo correction which is very helpful to careless typers like me.</p>

<h4>The pain during the switching</h4>

<p>After typing around with zsh, I was going to spreading it. I am using Octopress for blogging, I am astonished when I find out zsh shows the git folder status in the prompt.</p>

<p>However, when I using rake to create a new post, it shows <code>zsh: no matches found: new_post[Switching to ZSH]</code>. I thought it was the ruby gem version problem as I installed something for OPENSHIFT of RedHat. But, it&#8217;s not.</p>

<p>The reason is zsh doesn&#8217;t know about the RVM function, RVM need to be loaded into the shell session as a function.</p>

<p>Append</p>

<pre><code>[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"  # This loads RVM
</code></pre>

<p>to the .zshrc will fix the problem.</p>

<h4>Investigate more</h4>

<p>Go through the <a href="http://zsh.sourceforge.net/Guide/">zsh user guide</a>, enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play around with Django]]></title>
    <link href="http://GoSteven.com/blog/2012/03/18/play-around-with-django/"/>
    <updated>2012-03-18T22:24:00+11:00</updated>
    <id>http://GoSteven.com/blog/2012/03/18/play-around-with-django</id>
    <content type="html"><![CDATA[<p>Worked on a simple repo recently, which is a diary site using Django-nonreal wich can use google app engine authentication.</p>

<p>GitHub: <a href="https://github.com/GoSteven/Diary">https://github.com/GoSteven/Diary</a></p>

<p>Django-nonreal contain all the major functionalities of Django which can host pure Django application on google application. It just works awesome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up octopress blog on GitHub]]></title>
    <link href="http://GoSteven.com/blog/2011/12/29/setting-up-octopress-blog-on-github/"/>
    <updated>2011-12-29T00:11:00+11:00</updated>
    <id>http://GoSteven.com/blog/2011/12/29/setting-up-octopress-blog-on-github</id>
    <content type="html"><![CDATA[<p>After install tons of things on my Mac and setting the DNS of the GoSteven.com domain, it finally works for me.</p>

<p>I am not going to migrate my old blog post here, as those are mostly code snippets. Visit <a href="http://dev.gosteven.com">Steven&#8217;s Dev Blog</a> in case you are interested.</p>
]]></content>
  </entry>
  
</feed>
