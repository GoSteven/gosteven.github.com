<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Steven You]]></title>
  <link href="http://GoSteven.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://GoSteven.com/"/>
  <updated>2013-10-16T00:18:15+00:00</updated>
  <id>http://GoSteven.com/</id>
  <author>
    <name><![CDATA[Steven You]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Download YouTube videos using python]]></title>
    <link href="http://GoSteven.com/blog/2012/06/07/download-youtube-videos-using-python/"/>
    <updated>2012-06-07T13:17:00+00:00</updated>
    <id>http://GoSteven.com/blog/2012/06/07/download-youtube-videos-using-python</id>
    <content type="html"><![CDATA[<p>I have searched around to find a simple way to download youtube video. However, google hasn’t provide an API for downloading, and youtube page content structure seems has changed a lot, some old post regarding how to download youtube video in <a href="http://abhinay.wordpress.com/2010/05/12/downloading-youtube-videos-using-python-one-liner/">one line python script</a> doesn’t work any more.</p>

<p>Finally I find an actively repository on github and forked it: <a href="https://github.com/GoSteven/python-youtube-download">python-youtube-download</a>.  To make it simpler to use rather than selecting the definition and specifying the format, I added main script to enable it to run in one line:</p>

<pre><code>python youtube.py "http://www.youtube.com/watch?v=6bXOOz8mN6U"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrent tasks execution in Python]]></title>
    <link href="http://GoSteven.com/blog/2012/05/13/concurrent-tasks-execution-in-python/"/>
    <updated>2012-05-13T13:37:00+00:00</updated>
    <id>http://GoSteven.com/blog/2012/05/13/concurrent-tasks-execution-in-python</id>
    <content type="html"><![CDATA[<p>There are tasks need to be done with multiple thread, e.g.: I need to request thousands of urls, in order to training the collaborative filtering service. This could easily be done using python.</p>

<h3>First way: Manage the thread yourself</h3>

<p>I have a repo on Github, <a href="https://github.com/GoSteven/tumblrimgdownloader/blob/master/imgdl.py">Tumblr Image Downloader</a>, which is used for batch download images from a tumblr blog using tumblr API.</p>

<p>Basically, there is a <em>task queue</em>:</p>

<p>Liquid error: undefined method `Py_IsInitialized' for RubyPython::Python:Module</p>

<p>and a <em>worker</em>:</p>

<p>Liquid error: undefined method `Py_IsInitialized' for RubyPython::Python:Module</p>

<p>What the <em>download_img</em> function does is get the image url and save it to the <em>save_path</em>.</p>

<p>The program will call the <em>download_imgs</em> function:
Liquid error: undefined method `Py_IsInitialized' for RubyPython::Python:Module</p>

<h3>Better and Simpler way: Using concurrent.futures module</h3>

<p><a href="http://www.python.org/dev/peps/pep-3148/">PEP 3148</a> gives the motivation for this module:</p>

<blockquote><p>Python currently has powerful primitives to construct multi-threaded and multi-process applications but parallelizing simple operations requires a lot of work i.e. explicitly launching processes/threads, constructing a work/results queue, and waiting for completion or some other termination condition (e.g. failure, timeout). It is also difficult to design an application with a global process/thread limit when each component invents its own parallel execution strategy.</p></blockquote>

<p>This module will make the life easier. Download link is <a href="http://pypi.python.org/pypi/futures">here</a>. There are two types of executor: ThreadPoolExecutor and ProcessPoolExecutor.</p>

<p>I will take ThreadPoolExecutor for example:</p>

<p>Liquid error: undefined method `Py_IsInitialized' for RubyPython::Python:Module</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
</feed>
